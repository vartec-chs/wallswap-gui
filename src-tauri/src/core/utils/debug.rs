use crate::core::api_result::{AppErrors, Result};
use crate::core::path::debug_dir;
use log;
use tokio::fs;

pub struct Debug;

impl Debug {
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    pub async fn save_html_debug(html: &str, filename: &str) -> Result<()> {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let debug_dir = debug_dir().await?;

        let file_path = debug_dir.join(filename);
        fs::write(&file_path, html)
            .await
            .map_err(|e| AppErrors::FileSystem(e.into()))?;
        log::info!("üêõ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", file_path.display());
        Ok(())
    }

    /// –í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ HTML
    pub fn preview_html(html: &str, lines: usize) {
        log::info!("üìÑ –ü—Ä–µ–≤—å—é HTML (–ø–µ—Ä–≤—ã–µ {} —Å—Ç—Ä–æ–∫):", lines);
        for (i, line) in html.lines().take(lines).enumerate() {
            log::info!(
                "{:3}: {}",
                i + 1,
                line.chars().take(100).collect::<String>()
            );
        }
    }
}
